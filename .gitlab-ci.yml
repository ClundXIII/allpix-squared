variables:
    EOS_PATH: "/eos/project/a/allpix-squared/www/"

stages:
    - compile
    - unittest
    - deploy

compile:slc6-gcc:
    stage: compile
    tags:
        - docker
    image: clicdp/slc6-base
    script:
        - export COMPILER_TYPE="gcc"
        - source .gitlab-ci.d/init_x86_64.sh
        - source .gitlab-ci.d/load_deps.sh
        - mkdir build
        - cd build
        - cmake -GNinja -DBUILD_ALL_MODULES=ON -DCMAKE_BUILD_TYPE=RELEASE -DGeant4_DIR=$G4LIB -DROOT_DIR=$ROOTSYS -DEigen3_DIR=$Eigen3_DIR ..
        - ninja
        - ninja install
    artifacts:
        paths:
            - build
        expire_in: 1 hour

unittest:slc6-gcc:
    stage: unittest
    tags:
        - docker
    dependencies:
        - compile:slc6-gcc
    image: clicdp/slc6-base
    script:
        - source .gitlab-ci.d/init_x86_64.sh
        - cd build/
        - ctest --output-on-failure -j4
        - cat output_check_performance.log  

compile:slc6-llvm:
    stage: compile
    tags:
        - docker
    image: clicdp/slc6-base
    script:
        - export COMPILER_TYPE="llvm"
        - source .gitlab-ci.d/init_x86_64.sh
        - mkdir build
        - cd build
        - cmake -GNinja -DBUILD_ALL_MODULES=ON -DCMAKE_BUILD_TYPE=RELEASE -DGeant4_DIR=$G4LIB -DROOT_DIR=$ROOTSYS -DEigen3_DIR=$Eigen3_DIR ..
        - ninja
        - ninja install
    artifacts:
        paths:
            - build
        expire_in: 1 hour

unittest:slc6-llvm-format:
    stage: unittest
    tags:
        - docker
    dependencies:
        - compile:slc6-llvm
    image: clicdp/slc6-base
    script:
        - export COMPILER_TYPE="llvm"
        - source .gitlab-ci.d/init_x86_64.sh
        - cd build/
        - ninja check-format

unittest:slc6-llvm-lint:
    stage: unittest
    tags:
        - docker
    dependencies:
        - compile:slc6-llvm
    image: clicdp/slc6-base
    script:
        - export COMPILER_TYPE="llvm"
        - source .gitlab-ci.d/init_x86_64.sh
        - cd build/
	- ninja check-lint


compile:centos7-gcc:
    stage: compile
    tags:
        - docker
    image: clicdp/cc7-base
    script:
        - export COMPILER_TYPE="gcc"
        - source .gitlab-ci.d/init_x86_64.sh
        - source .gitlab-ci.d/load_deps.sh
        - mkdir build
        - cd build
        - cmake -GNinja -DBUILD_ALL_MODULES=ON -DCMAKE_BUILD_TYPE=RELEASE -DGeant4_DIR=$G4LIB -DROOT_DIR=$ROOTSYS -DEigen3_DIR=$Eigen3_DIR ..
        - ninja
        - ninja install
        - ctest --output-on-failure -j4
        - cat output_check_performance.log 

compile:centos7-llvm:
    stage: compile
    tags:
        - docker
    image: clicdp/cc7-base
    script:
        - export COMPILER_TYPE="llvm"
        - source .gitlab-ci.d/init_x86_64.sh
        - mkdir build
        - cd build
        - cmake -GNinja -DBUILD_ALL_MODULES=ON -DCMAKE_BUILD_TYPE=RELEASE -DGeant4_DIR=$G4LIB -DROOT_DIR=$ROOTSYS -DEigen3_DIR=$Eigen3_DIR ..
        - ninja
        - ninja check-format
        - ninja check-lint
        - ninja install
# skip tests because lint takes long

compile:mac1012-clang:
    stage: compile
    tags:
        - mac
    script:
        - source .gitlab-ci.d/init_mac.sh
        - source .gitlab-ci.d/load_deps.sh
        - mkdir build
        - cd build
        - cmake -GNinja -DBUILD_ALL_MODULES=ON -DCMAKE_BUILD_TYPE=RELEASE -DGeant4_DIR=$G4LIB -DROOT_DIR=$ROOTSYS -DEigen3_DIR=$Eigen3_DIR ..
        - ninja
        - ninja install
        - ctest --output-on-failure -j4
        - cat output_check_performance.log 


# Compile Doxygen reference
compile-doxygen:
    stage: compile
    tags:
        - docker
    image: clicdp/cc7-base
    script:
        - export COMPILER_TYPE="gcc"
        - source .gitlab-ci.d/init_x86_64.sh
        - source .gitlab-ci.d/load_deps.sh
        - mkdir public
        - mkdir build
        - cd build
        - cmake -DBUILD_ALL_MODULES=ON -DCMAKE_BUILD_TYPE=RELEASE -DGeant4_DIR=$G4LIB -DROOT_DIR=$ROOTSYS -DEigen3_DIR=$Eigen3_DIR ..
        - make reference
        - mv reference/html ../public/reference
    artifacts:
        paths:
            - public
        expire_in: 1 hour

# Compile LaTeX user manual:
compile-usermanual:
    stage: compile
    tags:
      - docker
    image: gitlab-registry.cern.ch/clicdp/publications/templates/custom_ci_worker:fedora-latex-latest
    script:
        - mkdir -p public/usermanual
        - mkdir build
        - cd build
        - cmake -DBUILD_DOCS_ONLY=ON ..
        - make pdf
        - make html
        - mv usermanual/*.html ../public/usermanual
        - mv usermanual/*.css ../public/usermanual
        - mv usermanual/logo.png ../public/usermanual
        - mv usermanual/allpix-manual.pdf ../public/usermanual
        - mkdir -p ../public/usermanual/usermanual/
        - mkdir -p ../public/usermanual/usermanual/html/
        - mv usermanual/usermanual/html/css ../public/usermanual/usermanual/html/
        - mv usermanual/usermanual/html/js ../public/usermanual/usermanual/html/
        - mv usermanual/usermanual/figures ../public/usermanual/usermanual/
    artifacts:
        paths:
          - public
        expire_in: 1 hour


# Automatically deploy documentation to the website
# Deployment job only executed for new tag pushs, not for every commit.
deploy-documentation:
    stage: deploy
    # Only run for new tags:
    only:
        - tags
    # Docker image with tools to deploy to EOS
    image: gitlab-registry.cern.ch/ci-tools/ci-web-deployer:latest
    script:
        - deploy-eos
    # do not run any globally defined before_script or after_script for this step
    before_script: []
    after_script: []
